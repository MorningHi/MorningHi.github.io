<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Something for Nothing</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://MorningHi.github.io/"/>
  <updated>2019-08-30T05:20:03.710Z</updated>
  <id>https://MorningHi.github.io/</id>
  
  <author>
    <name>Rezero</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>十大排序算法总结</title>
    <link href="https://MorningHi.github.io/2019/08/29/sort/"/>
    <id>https://MorningHi.github.io/2019/08/29/sort/</id>
    <published>2019-08-29T13:22:22.000Z</published>
    <updated>2019-08-30T05:20:03.710Z</updated>
    
    <content type="html"><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>&emsp;&emsp;<strong>排序</strong> 是计算机内部经常进行的一项操作，目的是将一组无序的序列调整为一组有序的序列。Excel中将数据按照名称进行升序降序排列就是一种常见的排序操作。</p><h2 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h2><ul><li><strong>时间复杂度</strong>：反映操作次数(计算量)随数据长度的变化规律，是数据规模的函数，用$O(·)$表示。</li><li><strong>空间复杂度</strong>：用来度量执行算法所需的存储空间随数据规模的变化情况，也用$O(·)$表示。</li><li><strong>稳定性</strong>：对于两个相等的元素 $a$ 和 $b$，如果排序算法不会改变他们的相对位置，则称排序算法是稳定的，否则这个算法就是不稳定的。</li></ul><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><p>&emsp;&emsp;根据排序过程是<strong>否需要使用外部存储空间</strong>可以将排序算法分为<strong>内部排序</strong>和<strong>外部排序</strong>。</p><p>&emsp;&emsp;根据排序算法的<strong>复杂度</strong>和是否是<strong>基于对元素进行比较</strong>进行排序又可以将算法分为<strong>非线性时间比较类排序</strong>和<strong>线性时间非比较类排序</strong>。</p><ul><li><strong>非线性时间比较类排序</strong>：顾名思义就是根据比较来确定元素的排列顺序的排序算法，时间复杂度最低为$(O(nlogn))$</li><li><strong>线性时间非比较类排序</strong>：不通过比较元素的相对大小来确定元素的排列顺序的算法，时间复杂度可以突破对数级别以线性时间运行。</li></ul><p><img src="https://github.com/MorningHi/ImgRepository/raw/master/Hexoblog/sort/classes.png" style="zoom:90%"></p><h2 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h2><p><img src="https://github.com/MorningHi/ImgRepository/raw/master/Hexoblog/sort/comparison.png" style="zoom:70%"></p><p>&emsp;&emsp;表中 $k$ 表示所需的桶(bucket)的个数——对于计数排序、桶排序和基数排序三种排序算法需要额外的<strong>“buckets”</strong>来辅助排序。</p><h2 id="具体算法介绍"><a href="#具体算法介绍" class="headerlink" title="具体算法介绍"></a>具体算法介绍</h2><p>下面具体介绍了每一种排序算法：</p><p>(1)  <a href="https://morninghi.github.io/2019/08/20/SelectionSort/">简单选择排序</a></p><p>(2)  <a href="https://morninghi.github.io/2019/08/20/bubbleSort/">冒泡排序</a></p><p>(3)  <a href="https://morninghi.github.io/2019/08/21/InsertionSort/">插入排序</a></p><p>(4)  <a href="https://morninghi.github.io/2019/08/22/ShellSort/">希尔排序</a></p><p>(5)  <a href="https://morninghi.github.io/2019/08/23/MergeSort/">归并排序</a></p><p>(6)  <a href="https://morninghi.github.io/2019/08/23/QuickSort/">快速排序</a></p><p>(7)  <a href="https://morninghi.github.io/2019/08/24/HeapSort/">堆排序</a></p><p>(8)  <a href="https://morninghi.github.io/2019/08/26/CountingSort/">计数排序/桶排序/基数排序</a></p><p>&emsp;&emsp;所有的排序都默认是按照从大到小的顺序进行排序，完整的代码可以在<a href="https://github.com/MorningHi/Algorithms-Edition4/tree/master/sort" target="_blank" rel="noopener">我的github</a>上下载。此外，文章中的所有演示动图都来自于互联网。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;&lt;strong&gt;排序&lt;/strong&gt; 是计算机内部经常进行的一项操作，目的是将一组无序的序列调整为一组有序的序列。
      
    
    </summary>
    
      <category term="算法基础" scheme="https://MorningHi.github.io/categories/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="java" scheme="https://MorningHi.github.io/tags/java/"/>
    
      <category term="排序算法" scheme="https://MorningHi.github.io/tags/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>计数排序/桶排序/基数排序</title>
    <link href="https://MorningHi.github.io/2019/08/26/CountingSort/"/>
    <id>https://MorningHi.github.io/2019/08/26/CountingSort/</id>
    <published>2019-08-26T08:54:24.000Z</published>
    <updated>2019-08-30T05:20:03.700Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;计数排序、桶排序和基数排序是三个线性时间非比较类排序算法，他们相同的特点在于不是通过比较元素的大小来确定他们的排列顺序，并且均能够达到线性时间复杂度$O(n+k)$，之所以这样根本在于他们都使用了额外的桶(bucket, 不是某种特定数据结构，只是一种叫法)来辅助存储数据。但是这三种排序算法的应用场景都比较有限，下面具体来讲一下这三种排序算法。</p><h2 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h2><h3 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h3><p>&emsp;&emsp;以一个整数数列为例，如果我们知道它的最大值和最小值，那么也就意味着数组中的所有元素都位于 [最小值，最大值] 这个区间，我们对这个区间的每一个数在数组中出现的次数，然后在从小到大展开，这样就完成了排序，这就是计数排序(counting sort)的基本思想。可以看到，计数排序<strong>不通过比较元素的大小关系来进行排序，因此是一种非比较类排序算法</strong>。</p><h3 id="算法流程"><a href="#算法流程" class="headerlink" title="算法流程"></a>算法流程</h3><ol><li>首先遍历数组找出最大值maxValue和最小值minValue，并根据最大最小值确定需要的桶(bucket)的个数 maxValue-minValue+1，这样每个桶就对应[minValue, maxValue]中的一个值；</li><li>遍历数组计数[minValue, maxValue]中每一个值在数组中出现的次数，存放到对应的桶中；</li><li>释放桶，每个位置的数字放回原数组。</li></ol><h3 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h3><p><center><img src="https://github.com/MorningHi/ImgRepository/raw/master/Hexoblog/sort/CountingSort.gif"></center></p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>&emsp;&emsp;计数排序的代码如下。这里使用了数组中最大最小值来确定需要的桶的个数，也有程序直接默认0为数组的最小值，但这样就无法处理带负数的数组，同时对于最小值远大于0的非负数组也会造成空间浪费。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">counting_sort</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 数组为空或者长度为1不需要排序</span></span><br><span class="line">    <span class="keyword">if</span>(arr == <span class="keyword">null</span> || arr.length &lt; <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> maxValue = arr[<span class="number">0</span>], minValue = arr[<span class="number">0</span>];   <span class="comment">// 找出最大最小值</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> n : arr)&#123;</span><br><span class="line">        <span class="keyword">if</span>(n &gt; maxValue)    maxValue = n;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(n &lt; minValue)    minValue = n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> bucketLen = maxValue - minValue + <span class="number">1</span>;   <span class="comment">//  需要的桶的个数</span></span><br><span class="line">    <span class="keyword">int</span>[] bucket = <span class="keyword">new</span> <span class="keyword">int</span>[bucketLen];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> n : arr)&#123;</span><br><span class="line">        <span class="comment">// 桶中每个位置用来计数原数组中等于"当前桶索引+minValue"的数的个数</span></span><br><span class="line">        bucket[n-minValue]++;    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> sortedIndex = <span class="number">0</span>;   <span class="comment">// 将桶里的元素放回原数组</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bucketLen; i++)&#123;</span><br><span class="line">        <span class="keyword">while</span>(bucket[i]-- &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            arr[sortedIndex++] = i + minValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><ul><li><p>时间复杂度</p><p>计数排序中共有三个for循环，前两个循环都是从前向后遍历数组，时间复杂度为 $O(n)$，第三个for循环从桶中取回元素到数组中，时间复杂度为 $O(n+k)$ ，其中 $k$ 是需要的桶的个数。总的来说基数排序的时间复杂度为 $O(n+k)$ ，最好最坏情况下都为 $O(n+k)$ 。</p></li><li><p>空间复杂度</p><p>计数排序使用了额外的长度为 $k$ 的数组来存放计数结果，空间复杂度为 $O(k)$。</p></li><li><p>稳定性</p><p>计数排序是稳定的排序算法。</p></li></ul><h2 id="桶排序"><a href="#桶排序" class="headerlink" title="桶排序"></a>桶排序</h2><h3 id="基本思想-1"><a href="#基本思想-1" class="headerlink" title="基本思想"></a>基本思想</h3><p>&emsp;&emsp;桶排序和计数排序的思路很象，只不过计数排序的“桶”只是用来计数每个元素的次数，而桶排序中的“桶”是真实存放元素的。桶排序中每个桶都是一个可以存放元素的容器，用来将原数组中的元素按照一定的<strong>映射规则</strong>放到桶里并且满足第 $i$ 个桶里的元素均小于第 $j$ 个桶里的元素($i&lt;j$)，然后对每一个桶里的元素分别进行排序，这样在所有的桶排序完成后再将元素取出放回到原数组。</p><h3 id="算法流程-1"><a href="#算法流程-1" class="headerlink" title="算法流程"></a>算法流程</h3><ol><li>首先根据元素范围和映射规则确定需要使用的桶的个数 $k$ ;</li><li>遍历数组并根据映射规则将每个元素放到对应的桶中；</li><li>对每个桶中的元素单独进行排序；</li><li>待所有桶中的元素均排序完成后，将元素依次放回原数组，排序完成。</li></ol><p>&emsp;&emsp;上面一直在提一个“<strong>映射规则</strong>”，这个映射规则的目的就是确定某个元素应该被放到哪个桶里，从而当 $i&lt;j$ 时满足第 $i$ 个桶里的元素均小于第 $j$ 个桶里的元素，这样保证在所有桶里元素均排序完成后将元素放回数组也是有序的。</p><p>&emsp;&emsp;映射规则是人为设计的具体来说，如果我们预设桶的容量为 $m$，也就是每个桶中最多存放 $m$ 个元素，假设数组最大值和最小值分别为 $max$ 和 $min$，那么桶排序需要的桶的个数就为 $(max-min)/m$，接下来通过以下映射确定元素 $x$ 应当被放到哪个桶中：</p><script type="math/tex; mode=display">i=\frac{x-min}{m}</script><p>可以理解为我们将 $[min,max]$ 区间划分为了 $k$ 个连续的子区间，然后将数组中的数放到所属的区间内，接下来对每个区间内的数单独排序，最后使得整个数组有序。</p><h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bucket_sort</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 数组为空或者长度为1不需要排序</span></span><br><span class="line">    <span class="keyword">if</span>(arr == <span class="keyword">null</span> || arr.length &lt; <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> bucketSize = <span class="number">10</span>;   <span class="comment">// 设定桶的容量</span></span><br><span class="line">    <span class="keyword">int</span> maxValue = arr[<span class="number">0</span>], minValue = arr[<span class="number">0</span>];   <span class="comment">// 找出最大最小值</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> n : arr)&#123;</span><br><span class="line">        <span class="keyword">if</span>(n &gt; maxValue)    maxValue = n;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(n &lt; minValue)    minValue = n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建桶的集合</span></span><br><span class="line">    ArrayList&lt;LinkedList&lt;Integer&gt;&gt; buckets = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">int</span> bucketLen = (<span class="keyword">int</span>)Math.floor((maxValue - minValue) / bucketSize) + <span class="number">1</span>;   <span class="comment">//  需要的桶的个数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bucketLen; i++)&#123;</span><br><span class="line">        buckets.add(<span class="keyword">new</span> LinkedList&lt;Integer&gt;());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  将数组中的元素根据所处区间放到桶中</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> n : arr)&#123;</span><br><span class="line">        <span class="keyword">int</span> index = (<span class="keyword">int</span>)Math.floor((n - minValue) / bucketSize); <span class="comment">// 确定当前元素应该放到第几个桶中</span></span><br><span class="line">        buckets.get(index).add(n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对每个桶中的元素进行排序</span></span><br><span class="line">    <span class="keyword">for</span>(LinkedList&lt;Integer&gt; bucket : buckets)&#123;</span><br><span class="line">        <span class="keyword">if</span>(bucket.size() &gt; <span class="number">1</span>)&#123; </span><br><span class="line">            Collections.sort(bucket); <span class="comment">// 桶中元素大于1才需要排序</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从桶中按顺序取出元素放回数组</span></span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(LinkedList&lt;Integer&gt; bucket : buckets)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> n : bucket)&#123;</span><br><span class="line">            arr[index++] = n;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;对于每个桶中元素单独排序的时候，由于桶的容量较小，因此使用像插入排序之类的基础排序方法性能也比较好。(代码中作弊使用了java自带的排序函数)</p><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><ul><li><p>时间复杂度</p><p>桶排序的平均时间复杂度为 $O(n+k)$ ，最好的时间复杂度为 $O(n+k)$ ，最坏的情况下时间复杂度为 $O(n^2)$。 当 $k==n$ 时，桶排序就变成了计数排序；当 $k==1$ 时，所有元素放在一个桶里，桶排序就演化成了内部排序的实现方式。</p></li><li><p>空间复杂度</p><p>桶排序使用了 $k$ 个桶来存放数组的所有元素，空间复杂度为 $O(n+k)$。</p></li><li><p>稳定性</p><p>桶排序的稳定性取决于内部排序算法。</p></li></ul><h2 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h2><h3 id="基本思想-2"><a href="#基本思想-2" class="headerlink" title="基本思想"></a>基本思想</h3><p>&emsp;&emsp;基数排序是另一种使用了桶来辅助排序的非比较类排序。从直观上来讲，对于一个均为正数的整型数组，每个数字的每一位都是0-9中的某个数字。这样我们从最低位(个位)开始将每个数字放到最低位数字对应的桶中(编号0-9)，这样按桶的顺序得到一个新排列的数组，接下来按照十位的数字再放到相应桶中，一直到最高位，最终就得到一个有序的数组。</p><h3 id="算法流程-2"><a href="#算法流程-2" class="headerlink" title="算法流程"></a>算法流程</h3><p>这里以一个元素均为正整数的数组为例，基数排序的步骤如下：</p><ol><li>遍历数组，找出数组中最大数的位数；</li><li>生成编号为0-9的桶用来存放元素；</li><li>遍历数组，得到每个数字最低位的数字 $i$，将这个数放入编号为 $i$ 的桶中；</li><li>按桶的编号顺序将桶中的元素放回数组；</li><li>遍历数组，得到每个元素的次低位元素，按照步骤3的规则放入对应的桶中；</li><li>按照同样的方式依次得到每个元素更高位的数，放入桶中，再按序放回数组，直到处理完最大数的最高位。</li></ol><h3 id="演示-1"><a href="#演示-1" class="headerlink" title="演示"></a>演示</h3><p><center><img src="https://github.com/MorningHi/ImgRepository/raw/master/Hexoblog/sort/RadixSort.gif"></center><br>&emsp;&emsp;上图演示了最高位数为两位的正整数排序过程，对于更大的数，使用相同的方法不断将元素放到桶中再取出就可以达到排序的效果。</p><h3 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h3><p>&emsp;&emsp;首先从最基础的待排序元素均为非负整数的排序过程来看，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">radix_sort</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line">     <span class="comment">// 数组为空或者长度为1不需要排序</span></span><br><span class="line">     <span class="keyword">if</span>(arr == <span class="keyword">null</span> || arr.length &lt; <span class="number">2</span>)&#123;</span><br><span class="line">         <span class="keyword">return</span>;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">int</span> maxBit = getMaxBit(arr);  <span class="comment">// 计算数组中最大的数的位数</span></span><br><span class="line">     <span class="keyword">int</span> bitCount = <span class="number">0</span>, div = <span class="number">1</span>, mod = <span class="number">10</span>;</span><br><span class="line">     <span class="keyword">while</span>(bitCount++ &lt; maxBit)&#123;</span><br><span class="line">         <span class="comment">// 生成桶集合，共10个桶代表0-9的数字</span></span><br><span class="line">         ArrayList&lt;Integer&gt;[] buckets = <span class="keyword">new</span> ArrayList[<span class="number">10</span>];</span><br><span class="line">         <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">             buckets[i] = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">for</span>(<span class="keyword">int</span> n : arr)&#123;</span><br><span class="line">             <span class="comment">// (n%mod)/div取每个数当前位的值：0-9 </span></span><br><span class="line">             <span class="keyword">int</span> current = (n % mod) / div + <span class="number">10</span>;</span><br><span class="line">             buckets[current].add(n);  <span class="comment">// 根据当前位的数将元素放入对应的桶中</span></span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="comment">// 将桶中的数放回数组</span></span><br><span class="line">         <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">         <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">             <span class="keyword">if</span>(!buckets[i].isEmpty())&#123;</span><br><span class="line">                 <span class="keyword">for</span>(<span class="keyword">int</span> n : buckets[i])&#123;</span><br><span class="line">                     arr[index++] = n;</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         div *= <span class="number">10</span>;</span><br><span class="line">         mod *= <span class="number">10</span>;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getMaxBit</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> maxValue = arr[<span class="number">0</span>], bit = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> n : arr)&#123;</span><br><span class="line">        <span class="keyword">if</span>(n &gt; maxValue)  maxValue = n;   <span class="comment">// 找出数组中最大的数</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(maxValue &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        bit++;</span><br><span class="line">        maxValue /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> bit;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>getMaxBit(int[] arr)</code>函数用来得到数组中最大数的位数。同时需要注意在获取每个元素当前位的数时不能改变元素的值，在代码中通过两行元素实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> current = (n % mod) / div + <span class="number">10</span>;</span><br><span class="line">buckets[current].add(n);</span><br></pre></td></tr></table></figure><p>初始 mod=10，div=1，以152为例，第一次循环得到个位的值为 <code>(152 % 10)/1 = 2</code>，每次循环之后mod和div均变为原来的十倍，这样取十位的值就是： <code>(152 % 100)/10 = 5</code>，取百位的值就是 <code>(152 % 1000)/100 = 1</code>.</p><p>&emsp;&emsp;但是上面的程序只能处理非负元素序列的排序，对于有符号的整数序列需要做出一定的修改。一种思路是将负数先按其绝对值进行排序，最后再对负数部分排列就可以。另一种思路就是扩展桶的数量的实现，对于非负整数我们用编号为0-9的桶来存放元素，那么对于有符号整数我们也可以用编号为0-18的19个桶来存放元素，每次取元素当前位值的同时带上元素的符号，这样0-8号桶存放当前位为 -9到-1的元素，9-18号桶存放当前位为0-9的元素。此外还要注意最大位数需要根据绝对值最大的元素来决定。</p><p>举个栗子：对于58和-128，首先确定最大位数为3，首先取个位值分别为8和-8，分别属于17号和1号桶，十位值分别为5和-2，分别属于14号桶和7号桶，百位值为0和-1，分别属于9号桶和8号桶。具体实现程序如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">radix_sort</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 数组为空或者长度为1不需要排序</span></span><br><span class="line">    <span class="keyword">if</span>(arr == <span class="keyword">null</span> || arr.length &lt; <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> maxBit = getMaxBit(arr);  <span class="comment">// 计算数组中最大的数的位数</span></span><br><span class="line">    <span class="keyword">int</span> bitCount = <span class="number">0</span>, div = <span class="number">1</span>, mod = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">while</span>(bitCount++ &lt; maxBit)&#123;</span><br><span class="line">        <span class="comment">// 生成桶集合，共19个桶，0-8存放负数，9-18存放正数</span></span><br><span class="line">        <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">        ArrayList&lt;Integer&gt;[] buckets = <span class="keyword">new</span> ArrayList[<span class="number">19</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">19</span>; i++)&#123;</span><br><span class="line">            buckets[i] = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> n : arr)&#123;</span><br><span class="line">            <span class="comment">/* </span></span><br><span class="line"><span class="comment">                 * (n%mod)/div取每个数当前位的值,这个值带符号</span></span><br><span class="line"><span class="comment">                 * 然后 +9，将原本的负数移动到区间[0-8], 原来的正数移动到[9-18]</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">            <span class="keyword">int</span> current = (n % mod) / div + <span class="number">9</span>;</span><br><span class="line">            buckets[current].add(n);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将桶中的数放回数组</span></span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">19</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!buckets[i].isEmpty())&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> n : buckets[i])&#123;</span><br><span class="line">                    arr[index++] = n;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        div *= <span class="number">10</span>;</span><br><span class="line">        mod *= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getMaxBit</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> maxValue = arr[<span class="number">0</span>], bit = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> n : arr)&#123;</span><br><span class="line">        <span class="keyword">if</span>(Math.abs(n) &gt; maxValue)  maxValue = Math.abs(n);   <span class="comment">// 找出数组中绝对值最大的数</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(maxValue &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        bit++;</span><br><span class="line">        maxValue /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> bit;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h3><ul><li><p>时间复杂度</p><p>基数排序平均时间复杂度为 $O(n <em> k)$，最好时间复杂度为 $O(n </em> k)$，最坏时间复杂度为 $O(n * k)$。</p></li><li><p>空间复杂度</p><p>基数排序需要额外 $k$ 个桶来存放所有的 $n$ 个元素，空间复杂度为 $O(n + k)$。</p></li><li><p>稳定性</p><p>对于数组中相同的元素，基数排序在每次向桶里放入元素和取出元素的时候不会改变它们的原有相对顺序，因此基数排序时稳定的。</p></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>&emsp;&emsp;计数排序、桶排序和基数排序达到线性时间复杂度的根本在于用空间换时间的策略，但是通过上面的具体解释也可以看出，它们通常只适用于整数元素序列的排序。如果是实数范围的元素很难进行排序。因此通常只在空间充足且对于整数元素排序的时候考虑它们。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;计数排序、桶排序和基数排序是三个线性时间非比较类排序算法，他们相同的特点在于不是通过比较元素的大小来确定他们的排列顺序，并且均能够达到线性时间复杂度$O(n+k)$，之所以这样根本在于他们都使用了额外的桶(bucket, 不是某种特定数据结构，只是一
      
    
    </summary>
    
      <category term="算法基础" scheme="https://MorningHi.github.io/categories/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="排序" scheme="https://MorningHi.github.io/tags/%E6%8E%92%E5%BA%8F/"/>
    
      <category term="java" scheme="https://MorningHi.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>堆排序</title>
    <link href="https://MorningHi.github.io/2019/08/24/HeapSort/"/>
    <id>https://MorningHi.github.io/2019/08/24/HeapSort/</id>
    <published>2019-08-24T05:57:26.000Z</published>
    <updated>2019-08-30T05:20:03.700Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h2><p>&emsp;&emsp;堆排序是基于<strong>堆</strong>这种数据结构的一种排序方法。首先将待排序的数组(或序列)构造成<strong>完全二叉树</strong>，然后利用完全二叉树中父节点和孩子节点之间的关系，每次从当前二叉树中找出最大节点并将其移出未排序部分，达到排序的目的。首先介绍一下一些相关概念：</p><ul><li><p><strong>完全二叉树</strong>：对于一棵深度为 $h$ 的二叉树，如果除了最后一层外，其他每层的节点数都达到最大，且第 $h$ 层的节点都连续集中在最左边，那么这就是一棵完全二叉树，如下图所示：</p><center><img src="https://github.com/MorningHi/ImgRepository/raw/master/Hexoblog/sort/wanquan.jpg"></center></li><li><p><strong>堆</strong>：这里完整的叫法应当是二叉堆，它是一棵堆有序的完全二叉树。堆分为<strong>最大堆和最小堆</strong>，对于最大堆来说所有的父节点均大于等于两个孩子节点的值，因此根节点应当是最大值节点；相反，对于最小堆，所有的父节点均小于等于子节点的值，因此最小堆的根节点是最小值节点。</p></li><li><p><strong>堆的顺序存储结构</strong>：堆是一棵完全二叉数，因此用数组这种顺序存储结构就可以表示：</p><p>①：按层序遍历的顺序在数组中存放堆的元素，下标0表示的元素是根节点，其子节点分别为下标1和下标2……依次类推；</p><p>②：节点 $i$ 如果存在左孩子，左孩子的下标为 $2i+1$；如果存在右孩子，右孩子的下标为 $2i+2$。</p></li></ul><h2 id="算法流程"><a href="#算法流程" class="headerlink" title="算法流程"></a>算法流程</h2><p>这里以一个长度为 $n$ 的数列arr为例</p><ol><li>首先将待排序数组构建成一个堆，此时根节点(arr[0])应当为最大值，整个数组都处于<strong>无序区</strong>；</li><li>将堆中最大的元素移出。具体做法就是交换数组第一个元素 arr[0] 和 最后一个元素arr[n-1]，交换之后 arr[n-1] 位于<strong>有序区</strong>，不再参与后面的排序，此时无序区由 {arr[0]~arr[n-2]} 组成；</li><li>第二步之后，无序区的元素排列是违反堆的规则的，因此要重新对无序区进行调整得到一个包含  {arr[0]~arr[n-2]} 的新堆，然后交换 arr[0] 和 最后一个元素arr[n-2]， 并且将arr[n-2] 移到有序区，接下来对剩余元素重复相同的操作直至排序完成。</li></ol><h2 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h2><p><center><img src="https://github.com/MorningHi/ImgRepository/raw/master/Hexoblog/sort/HeapSort.gif"></center></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>堆排序中，关键的一个操作就是每次调整无序区的元素使其满足堆的规则，这个操作通过adjust()函数实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">adjust</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> i, <span class="keyword">int</span> N)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">2</span>*i+<span class="number">1</span> &lt; N)&#123;</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">2</span> * i + <span class="number">1</span>; <span class="comment">// 当前节点左孩子结点的索引</span></span><br><span class="line">        <span class="keyword">if</span>(j+<span class="number">1</span> &lt; N &amp;&amp; (arr[j] &lt; arr[j+<span class="number">1</span>]))   j++;   <span class="comment">// 找到最大的孩子节点</span></span><br><span class="line">        <span class="keyword">if</span>(arr[i] &gt;= arr[j])   <span class="keyword">break</span>;   <span class="comment">// 表明根节点大于等于所有的孩子节点，不用交换</span></span><br><span class="line">        <span class="keyword">int</span> temp = arr[i];  <span class="comment">// 交换最大孩子节点和根节点</span></span><br><span class="line">        arr[i] = arr[j];</span><br><span class="line">        arr[j] = temp;</span><br><span class="line">        i = j;   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>排序函数如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">heap_sort</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 数组为空或者长度为1不需要排序</span></span><br><span class="line">        <span class="keyword">if</span>(arr == <span class="keyword">null</span> || arr.length &lt; <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> N = arr.length;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = N/<span class="number">2</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">            adjust(arr, i, N);  <span class="comment">// 通过调整使得初始堆有序</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 交换根节点(保存着最大元素)和最后一个孩子节点，并从堆中删除</span></span><br><span class="line">        <span class="keyword">while</span>(N-- &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> temp = arr[N];</span><br><span class="line">            arr[N] = arr[<span class="number">0</span>];</span><br><span class="line">            arr[<span class="number">0</span>] = temp;</span><br><span class="line">            adjust(arr, <span class="number">0</span>, N);  <span class="comment">// 重新调整数组使得堆有序</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>说明：首先对于原数组进行调整使得初始堆有序，然后通过while循环里的语句，首先交换当前堆中第一个元素和最后一个元素，并将最后一个元素移出堆(通过N—实现)，再重新调整堆使其有序。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><ul><li><p><strong>时间复杂度</strong></p><p>堆排序遍历的次数就是由初始元素构成的完全二叉树的深度，其时间复杂度为 $O(n)$，最好和最差情况下也都为 $O(n)$。</p></li><li><p><strong>空间复杂度</strong></p><p>堆排序使用的额外空间跟数组长度无关，因此空间复杂度是 $O(1)$。</p></li><li><p><strong>稳定性</strong></p><p>如果存在重复元素，堆排序在交换堆顶元素和最后一个元素的时候，可能将原本靠后的元素前移，造成相同元素相对顺序的改变，因此堆排序是不稳定的。</p></li></ul><p>堆排序是目前唯一能够同时最优地利用时间和空间的排序方法。</p><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><blockquote><ol><li><a href="https://www.jianshu.com/p/47170b1ced23" target="_blank" rel="noopener">一文搞定十大经典排序算法</a></li><li>《算法(第四版)》</li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;基本思想&quot;&gt;&lt;a href=&quot;#基本思想&quot; class=&quot;headerlink&quot; title=&quot;基本思想&quot;&gt;&lt;/a&gt;基本思想&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;堆排序是基于&lt;strong&gt;堆&lt;/strong&gt;这种数据结构的一种排序方法。首先将待排序的数组(或序
      
    
    </summary>
    
      <category term="算法基础" scheme="https://MorningHi.github.io/categories/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="排序" scheme="https://MorningHi.github.io/tags/%E6%8E%92%E5%BA%8F/"/>
    
      <category term="java" scheme="https://MorningHi.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>快速排序</title>
    <link href="https://MorningHi.github.io/2019/08/23/QuickSort/"/>
    <id>https://MorningHi.github.io/2019/08/23/QuickSort/</id>
    <published>2019-08-23T11:23:12.000Z</published>
    <updated>2019-08-30T05:20:03.710Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h2><p>&emsp;&emsp;快速排序也是一种基于分治的排序算法，它的主要思想是将一个数组<strong>切分</strong>成两部分，将这两部分独立的进行排序。和归并排序不同的是：归并排序首先对两部分子数组进行排序，在子数组各自有序之后将他们合并为一个完整的有序数组；而快速排序在两个子数组均有序的时候整个数组也已经有序了。</p><p>&emsp;&emsp;快速排序的关键在于对数组的切分，这个过程通过一个<strong>切分元素</strong>(或者叫基准)来实现的，切分将数组划分为两部分，满足前一部分的元素均不大于切分元素，后一部分元素均不小于切分元素，这样在前后两部分都有序时整个数组自然而然就是有序的。</p><h2 id="算法流程"><a href="#算法流程" class="headerlink" title="算法流程"></a>算法流程</h2><ol><li>首先选取切分元素(随计选取或者取数组第一个元素)；</li><li>从前向后遍历数组，找到一个大于切分元素的元素，接着从后向前遍历元素找到一个小于切分元素的元素，然后交换这两个元素的位置；</li><li>重复步骤2，直到遍历数组的两个指针相遇，交换此位置的元素和切分元素。这样整个数组就被切分元素分割成了两部分，满足前面的元素均不大于它，后面的元素均不小于它；</li><li>对两部分子数组递归地进行步骤1-3。</li></ol><h2 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h2><p><center><img src="https://github.com/MorningHi/ImgRepository/raw/master/Hexoblog/sort/QuickSort.gif"></center></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>&emsp;&emsp;上面讲到其实切分部分时算法的核心，因此首先给出切分数组的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = lo, j = hi + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> v = arr[lo];   <span class="comment">//指定切分元素为第一个元素</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">        <span class="keyword">while</span>(arr[++i] &lt; v)&#123;   <span class="comment">// 从第二个元素开始向后遍历，找到大于基准的元素</span></span><br><span class="line">            <span class="keyword">if</span>(i == hi)  <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(arr[--j] &gt; v)&#123;</span><br><span class="line">            <span class="keyword">if</span>(j == lo)  <span class="keyword">break</span>; <span class="comment">// 从最后一个元素向前遍历，找到小于基准的元素</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i &gt;= j) <span class="keyword">break</span>;  <span class="comment">// 前后便利的指针相遇，退出循环</span></span><br><span class="line">        swap(arr, i, j);  <span class="comment">// swap是交换数组元素的函数</span></span><br><span class="line">    &#125;</span><br><span class="line">    swap(arr, lo, j);</span><br><span class="line">    <span class="keyword">return</span> j;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>切分函数中使用了第一个元素作为切分元素，因此从第二个元素向后遍历，从最后一个元素向前遍历，并交换满足条件的元素。最差的情况就是其余所有元素都小于切分元素 (<code>i==hi</code>)，或者其余所有元素都大于切分元素(<code>j==lo</code>)，此时造成的结果是两部分切分非常不均匀，因此随机选取切分元素往往是更好的选择， 或者在排序之前将数组随机打乱。</p><p>&emsp;&emsp;下面是排序函数，可以看到排序的最主要的操作就是切分，然后不断地递归切分子数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quick_sort</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 数组为空或者长度为1不需要排序</span></span><br><span class="line">    <span class="keyword">if</span>(arr == <span class="keyword">null</span> || arr.length &lt; <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(arr, <span class="number">0</span>, arr.length-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(lo &gt;= hi)  <span class="keyword">return</span>; <span class="comment">// lo&gt;=hi说明当前部分已经不需要排序了</span></span><br><span class="line">    <span class="keyword">int</span> j = partition(arr, lo, hi);  <span class="comment">// 切分数组</span></span><br><span class="line">    sort(arr, lo, j-<span class="number">1</span>);  <span class="comment">// 递归地对两部分子数组进行排序</span></span><br><span class="line">    sort(arr, j+<span class="number">1</span>, hi);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><h3 id="算法改进"><a href="#算法改进" class="headerlink" title="算法改进"></a>算法改进</h3><p><strong>1. 随机选择切分元素</strong></p><p>&emsp;&emsp;前面提到，在一些极端情况下(例如初始数组是倒序的)，选取第一个元素进行切分造成的结果就是每次切分的两部分非常不平衡。以倒序数组来说第一次切分后较长的一部分长度为 $n-1$ (假设数组总长度为n)，这样会造成没有很好的利用到分治带来的优势，降低算法性能。 因此一个改进措施就是随机选取切分元素，或者是选取切分元素前将数组随机打乱。</p><p><strong>2. 切换到插入排序</strong></p><p>&emsp;&emsp;对于小数组快速排序比插入排序慢，因此和归并排序一样，在子数组规模较小的时候切换为插入排序而不是递归地使用快速排序能够提高算法的效率。</p><p><strong>3. 三路切分</strong></p><p>&emsp;&emsp;实际排序中如果数组中包含大量重复元素，此时对于所有元素均相等的子数组，快速排序仍旧会不断地将其切分为更小的数组，这时候可以通过将数组划分为三部分来改进快速排序。</p><p>&emsp;<strong>① 思想</strong></p><p>&emsp;&emsp;三路划分的思想是利用切分函数将待排序数组列划分为三部分：第一部分小于切分元素，第二部分等于切分元素，第三部分大于切分元素，接下来递归地对除了中间部分的其余两部份进行排序。这样如果数组中包含了大量重复元素，就可以避免对于重复部分进行切分排序的时间消耗。</p><p>&emsp;<strong>② 代码</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quick3way_sort</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(hi &lt;= lo) <span class="keyword">return</span>;  <span class="comment">// lo&gt;=hi说明当前部分已经不需要切分排序了</span></span><br><span class="line">    <span class="keyword">int</span> lt = lo, i = lo+<span class="number">1</span>, gt = hi;</span><br><span class="line">    <span class="keyword">int</span> v = arr[lo];   <span class="comment">// 切分元素</span></span><br><span class="line">    <span class="keyword">while</span>(i &lt;= gt)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i] &lt; v)  swap(arr, i++, lt++);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(arr[i] &gt; v)  swap(arr, i, gt--);</span><br><span class="line">        <span class="keyword">else</span> i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// while循环执行完后，arr[lo...lt-1] &lt; a[lt...gt] &lt; a[gt+1...hi]</span></span><br><span class="line">    quick3way_sort(arr, lo, lt-<span class="number">1</span>);  <span class="comment">// 然后对除了切分部分外的两部分递归排序</span></span><br><span class="line">    quick3way_sort(arr, gt+<span class="number">1</span>, hi);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：这里三路切分函数依旧使用第一个元素作为切分的基准，标记为v，lt用来存储切分部分的左边界，初始为数组首位置，gt存放切分部分的右边界，初始为数组的末尾。从第二个元素开始向后遍历并且和v比较：如果当前元素小于v，将其切分到左边并且切分左边界右移(<code>lt++</code>)；如果当前元素大于v，将其切分到右边并且切分部分右边界左移(<code>gt--</code>)，此时不执行i++的原因是不知道当前右边界元素和切分元素的大小关系，需要下一次循环中进行比较；如果当前元素等于切分元素，继续向后遍历。</p><h3 id="算法性能分析"><a href="#算法性能分析" class="headerlink" title="算法性能分析"></a>算法性能分析</h3><ul><li><p>时间复杂度</p><p>快速排序的平均时间复杂度为 $O(nlogn)$。最好情况下，如果每次划分得当，递归树的深度就是 $logn$，时间复杂度为 $O(nlogn)$；最差情况下，每次划分都取到了数组中最大的(或最小的)元素作为切分元素，此时快速排序就退化为了冒泡排序，时间复杂度为 $O(n^2)$。</p></li><li><p>空间复杂度</p><p>快速排序主要的空间消耗是递归调用的空间占用。最好情况下，每次都能平均划分数组，空间复杂度为 $O(logn)$，最差情况下就是退化为冒泡排序，此时时间复杂度为 $O(n)$。</p></li><li><p>稳定性</p><p>在交换切分元素和遍历相遇点元素的时候，快速排序有可能打乱数组重复元素原有的顺序，因此快速排序是不稳定的。</p></li></ul><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><blockquote><ol><li><a href="https://www.jianshu.com/p/47170b1ced23" target="_blank" rel="noopener">一文搞定十大经典排序算法</a></li><li>《算法(第四版)》</li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;基本思想&quot;&gt;&lt;a href=&quot;#基本思想&quot; class=&quot;headerlink&quot; title=&quot;基本思想&quot;&gt;&lt;/a&gt;基本思想&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;快速排序也是一种基于分治的排序算法，它的主要思想是将一个数组&lt;strong&gt;切分&lt;/strong&gt;成
      
    
    </summary>
    
      <category term="算法基础" scheme="https://MorningHi.github.io/categories/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="排序" scheme="https://MorningHi.github.io/tags/%E6%8E%92%E5%BA%8F/"/>
    
      <category term="java" scheme="https://MorningHi.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>归并排序</title>
    <link href="https://MorningHi.github.io/2019/08/23/MergeSort/"/>
    <id>https://MorningHi.github.io/2019/08/23/MergeSort/</id>
    <published>2019-08-23T07:48:12.000Z</published>
    <updated>2019-08-30T05:20:03.710Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h2><p>&emsp;&emsp;用一句话描述归并排序就是：将两个有序的数组归并(Merge)为一个有序数组。归并排序是<strong>分治思想</strong>的一种典型应用。归并排序可以通过<strong>自顶向下</strong>的方式实现，也可以通过<strong>自底向上</strong>的方式实现。</p><ul><li><p><strong>自顶向下</strong></p><p>自顶向下的归并排序首先将数组分成两个子数组，分别递归调用这两部分进行单独排序，最后合并子数组。下面的动图演示就是自顶向下的归并排序。</p></li><li><p><strong>自底向上</strong></p><p>和自顶向下的归并排序化整为零的思路不同，自底向上的归并排序循序渐进的解决问题。具体来说，首先对原数组进行两两归并(即数组中元素按顺序两两为一组，对每一组分别进行归并)，然后是四四归并……，一直到数组有序。</p></li></ul><h2 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h2><ul><li>自顶向下的归并排序</li></ul><center><img src="https://github.com/MorningHi/ImgRepository/raw/master/Hexoblog/sort/mergeSort.gif" style="zoom:20"></center>- 自底向上的归并排序  <center><img src="https://github.com/MorningHi/ImgRepository/raw/master/Hexoblog/sort/mergeBU.jpg"></center><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><ul><li><p>归并函数</p><p>归并操作是归并排序的一个核心操作，其目的是将两个有序的子数组合并成一个有序数组。这里首先给出归并操作的函数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> lo, <span class="keyword">int</span> mid, <span class="keyword">int</span> hi)</span></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    lo: 归并部分的左边界</span></span><br><span class="line"><span class="comment">    hi: 归并部分的右边界</span></span><br><span class="line"><span class="comment">    mid: 两个归并部分的分界</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">int</span> i = lo, j = mid + <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 复制arr[lo]... arr[hi]到辅助数组aux[]，aux[]是归并排序类的类私有变量</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k = lo; k &lt;= hi; k++)&#123;</span><br><span class="line">        aux[k] = arr[k];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k = lo; k &lt;= hi; k++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i &gt; mid)   arr[k] = aux[j++];   <span class="comment">// 左半边用尽则直接取右半边元素</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(j &gt; hi)   arr[k] = aux[i++];   <span class="comment">// 右半边用尽则直接取左半边元素</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(aux[j] &lt; aux[i])   arr[k] = aux[j++];<span class="comment">// 左边元素大于右边元素， 取右边元素</span></span><br><span class="line">        <span class="keyword">else</span>  arr[k] = aux[i++];   <span class="comment">// 右边元素大于等于左边元素，取左边元素</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>自顶向下的排序</p><p>sortTD()函数是提供调用的归并排序函数，在其内部递归调用对子数组的排序函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 自顶向下的归并排序</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sortTD</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line"> <span class="comment">// 数组为空或者长度为1不需要排序</span></span><br><span class="line"> <span class="keyword">if</span>(arr == <span class="keyword">null</span> || arr.length &lt; <span class="number">2</span>)&#123;</span><br><span class="line"> <span class="keyword">return</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">aux = <span class="keyword">new</span> <span class="keyword">int</span>[arr.length];   <span class="comment">// 给辅助数组分配和原数组大小相同的空间</span></span><br><span class="line">sort(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>);  <span class="comment">// 递归排序函数的入口</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>sort()函数是私有的，因为外部不需要调用，它不断的对自己进行递归调用达到化整为零的效果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi)</span></span>&#123;</span><br><span class="line">     <span class="comment">/*</span></span><br><span class="line"><span class="comment">    lo: 排序数组左边界</span></span><br><span class="line"><span class="comment">    hi: 排序数组右边界</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">if</span>(hi &lt;= lo)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (lo + hi) / <span class="number">2</span>;</span><br><span class="line">    sort(arr, lo, mid);   <span class="comment">// 对左半边进行排序</span></span><br><span class="line">    sort(arr, mid+<span class="number">1</span>, hi); <span class="comment">// 对右半边进行排序</span></span><br><span class="line">    <span class="comment">/* 由于左右两边此时都是有序的，所以当arr[mid] &lt;= arr[mid+1]时</span></span><br><span class="line"><span class="comment">        表明数组整体也是有序的，不需要进行合并*/</span></span><br><span class="line">    <span class="keyword">if</span>(arr[mid] &lt;= arr[mid+<span class="number">1</span>])&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    merge(arr, lo, mid ,hi);  <span class="comment">//合归并左右两部分</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>自底向上的排序</p><p>自底向上的归并排序代码较为简单，从第一轮每个子数组大小为1开始，每一轮的子数组大小翻倍。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自底向上的归并排序</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sortBU</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 数组为空或者长度为1不需要排序</span></span><br><span class="line">    <span class="keyword">if</span>(arr == <span class="keyword">null</span> || arr.length &lt; <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> N = arr.length;</span><br><span class="line">    aux = <span class="keyword">new</span> <span class="keyword">int</span>[N];   <span class="comment">// 给辅助数组分配和原数组大小相同的空间</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> sz = <span class="number">1</span>; sz &lt; N; sz += sz)&#123;</span><br><span class="line">        <span class="comment">//从两两归并开始， 不断增大归并的规模</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> lo = <span class="number">0</span>; lo &lt; N-sz; lo += sz+sz)&#123;</span><br><span class="line">            merge(arr, lo, lo+sz-<span class="number">1</span>, Math.min(lo+sz+sz-<span class="number">1</span>, N-<span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><ul><li><p><strong>时间复杂度</strong></p><p>采用了分治的思想后，归并排序的时间复杂度达到了$O(nlogn)$，并且最好最差情况下都是$O(nlogn)$。</p></li><li><p><strong>空间复杂度</strong></p><p>由于归并排序需要一个和待排序数组辅助数组来存放临时数组，因此其空间复杂度为$O(n)$，也就是需要的额外空间和原数组大小成正比。</p></li><li><p><strong>稳定性</strong></p><p>无论是自顶向下的归并排序还是自底向上的归并排序，对于相同的元素，排序都不会改变他们的相对顺序，因此归并排序是稳定的。</p></li></ul><p>&emsp;&emsp;对于小规模问题，使用自顶向下的归并排序会频繁的递归调用排序函数，因此在使用归并排序时可以使用插入排序处理小规模的子数组，提高算法效率。</p><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><blockquote><p>《算法(第四版)》</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;基本思想&quot;&gt;&lt;a href=&quot;#基本思想&quot; class=&quot;headerlink&quot; title=&quot;基本思想&quot;&gt;&lt;/a&gt;基本思想&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;用一句话描述归并排序就是：将两个有序的数组归并(Merge)为一个有序数组。归并排序是&lt;strong
      
    
    </summary>
    
      <category term="算法基础" scheme="https://MorningHi.github.io/categories/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="排序" scheme="https://MorningHi.github.io/tags/%E6%8E%92%E5%BA%8F/"/>
    
      <category term="java" scheme="https://MorningHi.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>希尔排序</title>
    <link href="https://MorningHi.github.io/2019/08/22/ShellSort/"/>
    <id>https://MorningHi.github.io/2019/08/22/ShellSort/</id>
    <published>2019-08-22T11:06:43.000Z</published>
    <updated>2019-08-30T05:20:03.710Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h2><ul><li><p><strong>h有序数组</strong></p><p>一个数组中任意间隔为 $h$ 的元素都是有序的，那这个数组就是<strong>h有序数组</strong>。如下图所示这个数组就是一个 $h$ 有序数组，其中 $h=4$。可以看到，虽然整个数组是乱序的，但任意相隔 $h=4$ 的元素都是有序的。</p><center><img src="https://github.com/MorningHi/ImgRepository/raw/master/Hexoblog/sort/hsort.PNG" style="zoom:15" \></center></li><li><p><strong>希尔排序</strong></p><p>希尔排序的思想就是，首先让数组 $h$ 有序，然后不断减小 $h$ 的值。试想一下，当 $h=1$ 的时候，数组 $h$ 有序也就意味着任意元素和它相邻的元素是有序的，这也就意味着整个数组已经有序了。希尔排序是第一个突破 $O(n^2)$ 的排序算法。</p></li></ul><h2 id="算法流程"><a href="#算法流程" class="headerlink" title="算法流程"></a>算法流程</h2><ol><li>首先给 $h$设置一个初始值(通常可以去数组长度的一半)；</li><li>遍历数组，使得所有相隔 $h$ 的元素组成的子序列有序；</li><li>更新 $h$：$h=h/2$，重复步骤2，直到 $h&lt;1$，排序完成。</li></ol><h2 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h2><p><center><img src="https://github.com/MorningHi/ImgRepository/raw/master/Hexoblog/sort/ShellSort.gif"></center><br>&emsp;&emsp;图中，第一遍排序时 $h=5$，第二遍 $h=2$，第三遍 $h=1$，第三遍排序完成后相邻两个元素有序，因此整个数组有序。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">shell_sort</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N = arr.length;</span><br><span class="line">    <span class="comment">// 数组为空或者长度为1不需要排序</span></span><br><span class="line">    <span class="keyword">if</span>(arr == <span class="keyword">null</span> || N &lt;= <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> h = N;</span><br><span class="line">    <span class="keyword">while</span>(h &gt;=<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = h; i &lt; N; i++)&#123;</span><br><span class="line">            <span class="comment">// 对于当前的h, 让数组h有序</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &gt;= h; j -= h)&#123;</span><br><span class="line">                <span class="keyword">if</span>(arr[j] &lt; arr[j-h])&#123;</span><br><span class="line">                    <span class="keyword">int</span> temp = arr[j];</span><br><span class="line">                    arr[j] = arr[j-h];</span><br><span class="line">                    arr[j-h] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        h /= <span class="number">2</span>;   <span class="comment">// 缩减h的值</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><ul><li><p><strong>时间复杂度</strong></p><p>之前在各种排序算法比较中虽然列出了希尔排序的复杂度，但实际情况是，希尔排序的性能与 $h$ 和 $h$ 之间的数学性质有很大的关系，有许多论文都在研究各种不同的 $h$ 递增序列，但到现在为止还无法证明某个序列是最好的。因此这里不深究其时间复杂度。</p></li><li><p><strong>空间复杂度</strong></p><p>希尔排序只使用了常数级别的额外空间，因此空间复杂度为 $O(n^2)$。</p></li><li><p><strong>稳定性</strong></p><p>希尔排序过程中各个子序列不影响，在排序中可能会造成相同元素相对位置的改变，因此是不稳定的。</p></li></ul><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><blockquote><p>《算法(第四版)》</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;基本思想&quot;&gt;&lt;a href=&quot;#基本思想&quot; class=&quot;headerlink&quot; title=&quot;基本思想&quot;&gt;&lt;/a&gt;基本思想&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;h有序数组&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一个数组中任意间隔为 $h$ 的元素都是有序的
      
    
    </summary>
    
      <category term="算法基础" scheme="https://MorningHi.github.io/categories/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="排序" scheme="https://MorningHi.github.io/tags/%E6%8E%92%E5%BA%8F/"/>
    
      <category term="java" scheme="https://MorningHi.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>插入排序</title>
    <link href="https://MorningHi.github.io/2019/08/21/InsertionSort/"/>
    <id>https://MorningHi.github.io/2019/08/21/InsertionSort/</id>
    <published>2019-08-21T12:44:31.000Z</published>
    <updated>2019-08-30T05:20:03.700Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h2><p>&emsp;&emsp;在玩扑克牌的时候，每当抽到一张牌的时候，就将其插入到手中已经有序的拍中，插入排序和这种整理扑克牌的思路很像。每遍历到一个新的元素就将其插入到它之前的所有元素中的合适位置，保证其之前的序列有序。</p><h2 id="算法流程"><a href="#算法流程" class="headerlink" title="算法流程"></a>算法流程</h2><ul><li>第一趟排序：将第二个元素插入到前一个元素的合适位置；</li><li>第二趟排序：将第三个元素插入到前两个元素中的正确位置；</li><li>第三趟排序：将第四个元素插入到前三个元素中的正确位置；<br>……</li><li>第 $n$ 趟排序：将第 $n$ 个元素插入到前 $n-1$ 个元素中的正确位置。</li></ul><p>可以通过下面的动图更直观地看到排序过程。显然，在每一轮排序之后，至少前 $n$ 个元素已经有序了。</p><h2 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h2><p><center><img src="https://github.com/MorningHi/ImgRepository/raw/master/Hexoblog/sort/InsertionSort.gif"></center></p><h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insertion_sort</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 数组为空或者长度为1不需要排序</span></span><br><span class="line">    <span class="keyword">if</span>(arr == <span class="keyword">null</span> || arr.length &lt; <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> N = arr.length;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; i++)&#123;</span><br><span class="line">        <span class="comment">// 每次循环将第j+1个元素插入到前j个元素中，保证前j+1个元素有序</span></span><br><span class="line">        <span class="keyword">int</span> temp = arr[i], j = i;</span><br><span class="line">        <span class="keyword">while</span>(temp &lt; arr[j-<span class="number">1</span>] &amp;&amp; j &gt; <span class="number">0</span>)&#123;   <span class="comment">// 大于当前元素的全部后移</span></span><br><span class="line">            arr[j] = arr[j-<span class="number">1</span>];</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h2><ul><li><p><strong>时间复杂度</strong></p><p>最好情况下：如果一开始数组就是有序的，那么插入排序只需要 $n-1$ 次比较，不需要交换，因此最好情况下时间复杂度为 $O(n)$;</p><p>最差情况下：如果一开始数组是倒序的，那么插入排序需要比较 $n(n-1)/2$ 次比较和 $n(n-1)/2$ 次交换，最差情况下时间复杂度为 $O(n^2)$;</p><p>平均来看，插入排序的时间复杂度为 $O(n^2)$。</p></li><li><p><strong>空间复杂度</strong>：插入排序同样只需要常熟级的额外空间，因此空间复杂度为 $O(1)$。</p></li></ul><h2 id="稳定性"><a href="#稳定性" class="headerlink" title="稳定性"></a>稳定性</h2><p>&emsp;&emsp;插入排序不会改变数组中相同元素的相对位置，因此是稳定的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;基本思想&quot;&gt;&lt;a href=&quot;#基本思想&quot; class=&quot;headerlink&quot; title=&quot;基本思想&quot;&gt;&lt;/a&gt;基本思想&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;在玩扑克牌的时候，每当抽到一张牌的时候，就将其插入到手中已经有序的拍中，插入排序和这种整理扑克牌的思
      
    
    </summary>
    
      <category term="算法基础" scheme="https://MorningHi.github.io/categories/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="排序" scheme="https://MorningHi.github.io/tags/%E6%8E%92%E5%BA%8F/"/>
    
      <category term="java" scheme="https://MorningHi.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>冒泡排序</title>
    <link href="https://MorningHi.github.io/2019/08/20/bubbleSort/"/>
    <id>https://MorningHi.github.io/2019/08/20/bubbleSort/</id>
    <published>2019-08-20T11:45:21.000Z</published>
    <updated>2019-08-30T05:20:03.710Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h2><p>&emsp;&emsp;冒泡排序是基于比较和交换的排序算法。它重复地比较两两元素，如果他们顺序错误就进行交换，直到没有交换发生表明数组已经有序。</p><p>&emsp;&emsp;之所以称为冒泡排序是因为在比较排序过程中，较小的元素会慢慢的前移，类似于碳酸饮料中二氧化碳的气泡上浮过程。</p><h2 id="算法流程"><a href="#算法流程" class="headerlink" title="算法流程"></a>算法流程</h2><ol><li>比较相邻元素，如果第一个元素比第二个元素大则交换它们的位置；</li><li>从开始第一对到最后一对的每一对相邻元素做步骤1同样的工作，这一步之后最后一个元素应该是最大值；</li><li>针对所有的元素重复以上的步骤；(实质上第 $i$ 趟排序之后至少最后 $i$ 个元素已经有序了，因此只需要对前 $n-i$ 个元素进行以上步骤)；</li><li>重复步骤1~3，直到排序完成。</li></ol><h2 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h2><p><center><img src="https://github.com/MorningHi/ImgRepository/raw/master/Hexoblog/sort/bubblesort.gif"></center></p><h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><p>冒泡排序 Java 版本的实现如下(代码只给出了排序函数的实现):<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bubble_sort</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 数组为空或者长度为1不需要排序</span></span><br><span class="line">    <span class="keyword">if</span>(arr == <span class="keyword">null</span> || arr.length &lt; <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> N = arr.length;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N - <span class="number">1</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N - i - <span class="number">1</span>; j++)&#123;</span><br><span class="line">            <span class="comment">// 如果相邻元素顺序不对则交换</span></span><br><span class="line">            <span class="keyword">if</span>(arr[j] &gt; arr[j+<span class="number">1</span>])&#123;</span><br><span class="line">                <span class="keyword">int</span> temp = arr[j];</span><br><span class="line">                arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">                arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>优化</strong>：实质上，如果某一次遍历过程中没有发生元素交换就说明数组已经有序，此时就可以提前终止排序。因此，可以在每趟排序前设置一个flag，初始设置为false，如果发生了元素交换则更新flag=true，这样本趟排序完成后如果flag仍为false说明没有元素交换，则退出排序。代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bubble_sort</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 数组为空或者长度为1不需要排序</span></span><br><span class="line">    <span class="keyword">if</span>(arr == <span class="keyword">null</span> || arr.length &lt; <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> N = arr.length;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N - <span class="number">1</span>; i++)&#123;</span><br><span class="line">    <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;    <span class="comment">// 标记本趟排序是否发生元素交换</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N - i - <span class="number">1</span>; j++)&#123;</span><br><span class="line">            <span class="comment">// 如果相邻元素顺序不对则交换</span></span><br><span class="line">            <span class="keyword">if</span>(arr[j] &gt; arr[j+<span class="number">1</span>])&#123;</span><br><span class="line">                <span class="keyword">int</span> temp = arr[j];</span><br><span class="line">                arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">                arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">                flag = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!flag)&#123;<span class="comment">// 一趟排序完成后flag仍为false，说明数组已经有序</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h2><ul><li><strong>时间复杂度</strong><br>最好情况下：初始时刻数组就是有序的，在设置了标记的时候，第一趟排序后排序就终止了，因此只需要进行$n-1$次比较，不需要进行交换，最好的时间复杂度为 $O(n)$。(但是如果不设置标记，算法仍旧需要比较 $n(n-1)/2$ 次，时间复杂度为 $O(n-1)$)<br>最坏情况下：初始时刻数组是倒序的，这样算法需要进行 $n(n-1)/2$ 次比较和 $n(n-1)/2$ 次交换，时间复杂度为 $O(n^2)$ 。</li><li><strong>空间复杂度</strong>：冒泡排序仅在交换元素的时候使用了常数级别的额外空间，因此空间复杂度为 $O(1)$。 </li></ul><h2 id="稳定性"><a href="#稳定性" class="headerlink" title="稳定性"></a>稳定性</h2><p>冒泡排序依据相邻元素的大小关系来决定是否交换，因此排序不会改变两个相同元素的顺序，所以是稳定的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;基本思想&quot;&gt;&lt;a href=&quot;#基本思想&quot; class=&quot;headerlink&quot; title=&quot;基本思想&quot;&gt;&lt;/a&gt;基本思想&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;冒泡排序是基于比较和交换的排序算法。它重复地比较两两元素，如果他们顺序错误就进行交换，直到没有交换发
      
    
    </summary>
    
      <category term="算法基础" scheme="https://MorningHi.github.io/categories/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="排序" scheme="https://MorningHi.github.io/tags/%E6%8E%92%E5%BA%8F/"/>
    
      <category term="java" scheme="https://MorningHi.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>简单选择排序</title>
    <link href="https://MorningHi.github.io/2019/08/20/SelectionSort/"/>
    <id>https://MorningHi.github.io/2019/08/20/SelectionSort/</id>
    <published>2019-08-20T08:41:51.000Z</published>
    <updated>2019-08-30T05:20:03.710Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h2><p>&emsp;&emsp;简单选择排序是一种简单并且非常直观的排序算法。它的思想是每次从未排序序列中找到最小值，然后将其放到已排序序列的末尾，重复这一过程直到不存在未排序元素。</p><h2 id="算法流程"><a href="#算法流程" class="headerlink" title="算法流程"></a>算法流程</h2><p>以长度为 $n$ 的数组为例：</p><ol><li>第一趟排序：从第一个元素开始遍历整个数组，找出最小值，和第一个元素交换；</li><li>第二趟排序：找出第二个元素到第 $n$ 个元素中的最小值，和第二个元素交换；</li><li>第三趟排序：找出第三个元素到第 $n$ 个元素中的最小值，和第三个元素交换；<br>……</li><li>第 $n-1$ 趟排序：将第 $n$-1 和第 $n$ 个元素正确排序，排序完成。</li></ol><h2 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h2><p><center><img src="https://raw.githubusercontent.com/MorningHi/ImgRepository/master/Hexoblog/sort/selectionSort.gif"></center></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>简单选择排序 Java 版本的实现如下(代码只给出了排序函数的实现):</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">selection_sort</span><span class="params">(<span class="keyword">int</span>[]  arr)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 数组为空或者长度为1不需要排序</span></span><br><span class="line">    <span class="keyword">if</span>(arr == <span class="keyword">null</span> || arr.length &lt; <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> min = i;  <span class="comment">// 记录最小值的索引</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; arr.length; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[j] &lt; arr[min])&#123;</span><br><span class="line">                min = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 交换当前值和最小值</span></span><br><span class="line">        <span class="keyword">int</span> temp = arr[i];</span><br><span class="line">        arr[i] = arr[min];</span><br><span class="line">        arr[min] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h2><ul><li><p><strong>时间复杂度</strong></p><p>最好情况下：初始数组就是有序的，此时简单选择排序需要进行 $n(n-1)/2$ 次比较，不需要交换元素，时间复杂度为 $O(n^2)$;<br>最差情况下：初始数组是倒序的(例如需要从小到大排序但初始数组是从大到小排列的)，此时简单选择排序需要进行 $n(n-1)/2$ 次比较和 $3(n-1)$ 次交换，时间复杂度也是$O(n^2)$;<br>因此，简单选择排序需要进行的比较次数<strong>与初始元素排列情况无关</strong>，其平均时间复杂度为$O(n^2)$，最好的情况时间复杂度为$O(n^2)$，最坏情况时间复杂度为$O(n^2)$。</p></li><li><p><strong>空间复杂度</strong>：简单选择排序仅需要在交换元素的时候使用额外的常数空间，因此空间复杂度为$O(1)$。</p></li></ul><h2 id="稳定性"><a href="#稳定性" class="headerlink" title="稳定性"></a>稳定性</h2><p>&emsp;&emsp;简单选择排序是一种<strong>不稳定</strong>的排序算法。例如对{2，4，2，1}进行排序，第一轮比较的时候第一个 “2” 会和 “1” 交换位置，破坏原有的两个 “2” 的顺序，因此它是不稳定的。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><ol><li><a href="https://www.jianshu.com/p/47170b1ced23" target="_blank" rel="noopener">一文搞定十大排序算法</a></li><li>《算法(第四版)》</li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;基本思想&quot;&gt;&lt;a href=&quot;#基本思想&quot; class=&quot;headerlink&quot; title=&quot;基本思想&quot;&gt;&lt;/a&gt;基本思想&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;简单选择排序是一种简单并且非常直观的排序算法。它的思想是每次从未排序序列中找到最小值，然后将其放到已
      
    
    </summary>
    
      <category term="算法基础" scheme="https://MorningHi.github.io/categories/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="排序" scheme="https://MorningHi.github.io/tags/%E6%8E%92%E5%BA%8F/"/>
    
      <category term="java" scheme="https://MorningHi.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>回环变位(Circular Rotation)</title>
    <link href="https://MorningHi.github.io/2018/08/13/circularRotation/"/>
    <id>https://MorningHi.github.io/2018/08/13/circularRotation/</id>
    <published>2018-08-13T05:21:24.000Z</published>
    <updated>2019-08-20T02:27:27.810Z</updated>
    
    <content type="html"><![CDATA[<p><strong>回环变位</strong>：如果字符串s中的字符循环移动任意位置之后能够得到另一个字符串 t，那么 s 称为 t 的回环变位(Circular Rotation)。例如，”ACTGACG” 就是 “TGACGAC” 的一个回环变位。</p><h3 id="一般的实现思想"><a href="#一般的实现思想" class="headerlink" title="一般的实现思想"></a>一般的实现思想</h3><blockquote><p>利用循环的方式遍历字符串t,从循环次数i处将字符串t分成两个字串后交换顺序拼接成一个新的字符串，比较新的s和新的字符串是否相等。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isCircularRotation1</span><span class="params">(String s, String t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(s.length() != t.length())   <span class="comment">//字符串长度不等则没必要再比较，直接返回false</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> N = s.length();</span><br><span class="line">System.out.println(N);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=N; i++)</span><br><span class="line">&#123;</span><br><span class="line">String subT1 = t.substring(<span class="number">0</span>, i);     <span class="comment">//在索引i处分割字符串t</span></span><br><span class="line">String subT2 = t.substring(i, N);</span><br><span class="line"><span class="keyword">if</span>(s.equals(subT2 + subT1))    <span class="comment">//交换顺序连接分割后的字串</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="让代码简单点"><a href="#让代码简单点" class="headerlink" title="让代码简单点"></a>让代码简单点</h3><p>《算法》(Algorithms)这本书的习题中关于回环变位给了这么一行提示：答案只需要一行用到 indexOf()、length() 和字符串连接的代码。</p><blockquote><p>怎么实现呢？——将 t 和 t 自身连接，这样如果 t 是 s 的回环变位，那么s肯定是 “t+t” 的一个子串！</p></blockquote><p>方法如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isCircularRotation</span><span class="params">(String s, String t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (s.length() == t.length()) &amp;&amp; ((t + t).indexOf(s) &gt; <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其中关于字符串对象的方法的具体使用可以参考 javaAPI文档，里面介绍的很详细。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;回环变位&lt;/strong&gt;：如果字符串s中的字符循环移动任意位置之后能够得到另一个字符串 t，那么 s 称为 t 的回环变位(Circular Rotation)。例如，”ACTGACG” 就是 “TGACGAC” 的一个回环变位。&lt;/p&gt;
&lt;h3 id=&quot;
      
    
    </summary>
    
      <category term="Java" scheme="https://MorningHi.github.io/categories/Java/"/>
    
    
      <category term="字符串" scheme="https://MorningHi.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
</feed>
